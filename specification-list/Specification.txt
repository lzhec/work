Приложение отображает список объектов в виде таблицы, который может содержать текст, изображения или произвольное содержимое HTML.
Столбцы таблицы формируются в произвольной форме в зависимости от задачи. Например, имя, ссылка, изображение. В последнем столбце разположены две кнопки, определяющие состояние элемента. Данные хранятся в формате JSON на сервере, либо на GitHub. 

Т.к. функционал приложения предполагает множество асинхронных действий, в его рализации должны быть заложены парадигмы реактивного программирования, изменяемого состояния. Оно должно быть одностраничным, легко расширяемым и не иметь проблем с пространством имен. Также асинхронные события дожны быть легко обрабатываемы. Изходя из вышеперечисленных условий спецификация написана с учетом стандарта ECMAScript 6, в качестве платформы выбраны Angular и библиотека RxJS.

Список имеет три состояния:
	Состояние 1 - основное состояние. Отображается весь загружаемый список с учетом фильтрации и пагинации, за исключением элементов состояния 3;
	Состояние 2 - отображаются отмеченные элементы списка;
	Состояние 3 - отображаются элементы, удаленные из состояния 1.

Приложение имеет следующий функционал:
	1. Сортировка:
		1.1. Элемент списка отмечается каким-либо визуальным эффектом, отображается в первичном состоянии, а также отображается в состоянии 2, в котором отображаются только отмеченные элементы. Также данный функционал должен работать и в обратную сторону, т.е. отменять отмеченный элемент, при этом элемент удаляется из состояния 2, а также убирается эффект "отмеченного элемента" у этого элемента в состоянии 1.
		1.2. Элемент удаляется из состояния 1 или 1 и 2, в зависимости от того, из какого состояния применяется данная сортировка и отображается в состоянии 3, в котором отображаются только удаленные из состояний 1 и 2 элементы. При этом, если элемент удален из состояния 2, он остается отмеченным и в состоянии 3 отображается как отмеченный. Также в состоянии 3 должна сохраняться возможность помечать элементы. При удалении из состояния 3 в зависимости от того, отмечен удаляемый элемент или нет, последний возвращается в состояние 1, либо в 1 и 2.
	2. Пагинация:
		Т.к. список может быть достаточно объемным, в приложении должна быть реализована пагинация. Это повышает удобство просмотра и, что важнее, скорость работы приложения. Формат отображения дожен иметь три режима, по 10 (по умолчанию), 50 и 100 элементов.
	3. Фильтрация и поиск:
		Текстовая форма, при вводе текста в которую в реальном времени отображаются только те элементы, имена (либо другое свойство) которых имеют вхождение строки, введенной в форме. 
	4. Сохранение состояний после обновления страницы:
		После обновления страницы все состояния должны отображаться в том виде, в котором они были до обновления.

Сортировка списка по состояниям осуществляется путем отображения/скрытия элементов в зависимости от комбинации их css-классов (классы объявляются в качестве переменных типа Boolean):
	'noLiked' - элемент не отмечен (состояние 1). По-умолчанию true;
	'isLiked' - элемент отмечен (состояние 2). По-умолчанию false;
	'isDeleted' - элемент в состоянии 3. По-умолчанию false;
	'noDeleted' - элемент в состоянии 1. По-умолчанию true;
	'hidden' - элемент скрыт в данном состоянии. По-умолчанию false;
	'star' - элемент отмечен (визуальный эффект).
Переключение между отображением состояний осуществляется тремя кнопками:
	Состояние 1: отображает все элементы, имеющие классы 'noLiked'/'isLiked' и 'noDeleted', остальные элементы скрываются посредством класса 'hidden';
	Состояние 2: отображает все элементы, имеющие классы 'isLiked' и 'noDeleted', остальные элементы скрываются посредством класса 'hidden';	
	Состояние 3: отображает все элементы, имеющие класс  'isDeleted', остальные элементы скрываются посредством класса 'hidden';	

Методы описывающие поведение приложения:
	public getList() - метод релизовывается в отдельном сервисе и возвращает массив Observable. Необходим для загрузки списка;

	getLiked() - функция привязана к событию нажатия на кнопку. Отмечает/делает неотмеченным выбранный html элемент посредством изменения его класса noLiked/isLiked;

	getDeleted() - функция привязана к событию нажатия на кнопку. Отмечает переводит html элемент в состояние 3 и обратно посредством изменения его классов noDeleted/isDeleted и hidden;

	showAll() - функция привязана к событию нажатия на кнопку. Отображает все элементы, не имеющие класс 'isDeleted', остальные скрывает классом 'hidden';

	showLiked() - функция привязана к событию нажатия на кнопку. Отображает все элементы, не имеющие класс 'isDeleted' и имеющие класс 'isLiked, остальные скрывает классом 'hidden';

	showDeleted() - функция привязана к событию нажатия на кнопку. Отображает все элементы, имеющие класс 'isDeleted', остальные скрывает классом 'hidden';

	ready() - функция должна срабатывать по событию загрузки DOM-дерева, выгружать элементы списка из Session Storage, перебирать их css-классы и в зависимости от значения переводить его в соответствующее состояние;

Далее представлена визуализация примера задачи, удовлетворяющей данной спецификации.
	Пример представляет собой приложение, загружающее с сервиса GitHub список эмодзи и выводящее его на экран в виде таблицы, содержаще следующии столбцы: номер, имя эмодзи, ссылка на эмодзи, изображение, кнопки "нравится" и "удалить".
	Слева распологается меню списков "Все эмодзи", "Любимые", "Удаленные" в виде кнопок, переключающихся между списками. Пользователь свободно переключается между списками, отмечает и удаляет нужные элементы.