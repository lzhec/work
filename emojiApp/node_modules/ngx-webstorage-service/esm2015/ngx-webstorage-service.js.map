{
  "version": 3,
  "file": "ngx-webstorage-service.js",
  "sources": [
    "ng://ngx-webstorage-service/out/src/storage-service.module.ts",
    "ng://ngx-webstorage-service/out/src/web-storage.service.ts",
    "ng://ngx-webstorage-service/out/src/in-memory-storage.service.ts",
    "ng://ngx-webstorage-service/out/src/storage-transcoders.ts",
    "ng://ngx-webstorage-service/out/src/base-storage.service.ts",
    "ng://ngx-webstorage-service/out/src/proxy-storage.service.ts"
  ],
  "sourcesContent": [
    "import { InjectionToken, NgModule } from '@angular/core';\n\nimport { InMemoryStorageService } from './in-memory-storage.service';\nimport { StorageService } from './storage.service';\nimport { isStorageAvailable, WebStorageService } from './web-storage.service';\n\n/** Injection token for the session storage service. */\nexport const SESSION_STORAGE = new InjectionToken<StorageService>('SESSION_STORAGE');\n\n/** Injection token for the local storage service. */\nexport const LOCAL_STORAGE = new InjectionToken<StorageService>('LOCAL_STORAGE');\n\nexport function sessionStorageFactory(): StorageService {\n    if (typeof sessionStorage as any === 'undefined' || !isStorageAvailable(sessionStorage)) {\n        return new InMemoryStorageService();\n    }\n\n    return new WebStorageService(sessionStorage);\n}\n\nexport function localStorageFactory(): StorageService {\n    if (typeof localStorage as any === 'undefined' || !isStorageAvailable(localStorage)) {\n        return new InMemoryStorageService();\n    }\n\n    return new WebStorageService(localStorage);\n}\n\n@NgModule({\n    providers: [\n        { provide: SESSION_STORAGE, useFactory: sessionStorageFactory },\n        { provide: LOCAL_STORAGE, useFactory: localStorageFactory }\n    ]\n})\nexport class StorageServiceModule {\n\n}\n",
    "import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * An implementation of `StorageService` interface that uses an underlying (web) `Storage` object, such as `localStorage` and\n * `sessionStorage`, as backing data store. This class basically wraps the `Storage` object so it can be accessed through the\n * `StorageService` interface.\n */\nexport class WebStorageService extends BaseStorageService<any> {\n\n    /**\n     * Creates a new `WebStorageService` instance that uses the specified (web) storage object as underlying backing storage.\n     *\n     * @param storage Storage object which is to be wrapped in a class that implements the `StorageService` interface.\n     */\n    constructor(private readonly storage: Storage) {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.getItem(key) !== null;\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.removeItem(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        const value = this.storage.getItem(key);\n\n        return value !== null ? value : undefined;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        return this.storage.setItem(key, value);\n    }\n\n}\n\n/**\n * Checks whether the specified (web) storage is available and functional. This might not be the case for older browsers. However even\n * certain browsers that do support the web storage API can, under some circumstances, have non functional storage objects. For example,\n * Safari is known to have `localStorage` and `sessionStorage` throw exceptions in private mode.\n *\n * @param   storage Storage object which is to be tested for availability.\n * @returns         `true` if the specified storage can be used, `false` if not.\n */\nexport function isStorageAvailable(storage: Storage): boolean {\n    // Check if storage is available.\n    if (!storage) {\n        return false;\n    }\n\n    // Check if the storage can actually be accessed.\n    try {\n        const now = Date.now();\n        const testItemKey = `storage-test-entry-${now}`;\n        const testItemValue = `storage-test-value-${now}`;\n        storage.setItem(testItemKey, testItemValue);\n        const retrievedItemValue = storage.getItem(testItemKey);\n        storage.removeItem(testItemKey);\n\n        return retrievedItemValue === testItemValue;\n    } catch (error) {\n        return false;\n    }\n}\n",
    "import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * A volatile `StorageService` implementation. This service guarantees that data stored will remain available as long as the application\n * instance is active. After the application is terminated all data will be lost.\n */\nexport class InMemoryStorageService extends BaseStorageService<any> {\n\n    /** A map that serves as the underlying backing storage for this service. */\n    private readonly storage: Map<string, string> = new Map<string, string>();\n\n    /**\n     * Creates a new `InMemoryStorageService` instance.\n     */\n    constructor() {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.has(key);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.delete(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        if (!this.storage.has(key)) {\n            return undefined;\n        }\n\n        return this.storage.get(key)!;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        this.storage.set(key, value);\n    }\n\n}\n",
    "import { StorageTranscoder } from './storage-transcoder';\n\n/** Transcoder that encodes values as JSON strings. */\nexport class JsonStorageTranscoder implements StorageTranscoder<any> {\n\n    public encode(value: any): string {\n        return JSON.stringify(value);\n    }\n\n    public decode(value: string): any {\n        try {\n            return JSON.parse(value);\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n}\n\n/** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\nexport class StringStorageTranscoder implements StorageTranscoder<string> {\n    public encode(value: string): string {\n        return value;\n    }\n\n    public decode(value: string): string {\n        return value;\n    }\n}\n\n/** Transcoder that encodes/decodes `boolean` values. */\nexport class BooleanStorageTranscoder implements StorageTranscoder<boolean> {\n    public encode(value: boolean): string {\n        return value.toString();\n    }\n\n    public decode(value: string): boolean | undefined {\n        if (value === 'true') {\n            return true;\n        }\n        if (value === 'false') {\n            return false;\n        }\n\n        return undefined;\n    }\n}\n\n/** Transcoder that encodes/decodes `number` values. */\nexport class NumberStorageTranscoder implements StorageTranscoder<number> {\n    public encode(value: number): string {\n        return value.toString();\n    }\n\n    public decode(value: string): number | undefined {\n        const parsedNumber = Number(value);\n\n        return Number.isFinite(parsedNumber) ? parsedNumber : undefined;\n    }\n}\n\n/** A set of storage transcoders. */\nexport const StorageTranscoders = {\n    /** Transcoder that encodes values as JSON strings. */\n    JSON: new JsonStorageTranscoder() as StorageTranscoder<any>,\n\n    /** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\n    STRING: new StringStorageTranscoder() as StorageTranscoder<string>,\n\n    /** Transcoder that encodes/decodes `boolean` values. */\n    BOOLEAN: new BooleanStorageTranscoder() as StorageTranscoder<boolean>,\n\n    /** Transcoder that encodes/decodes `number` values. */\n    NUMBER: new NumberStorageTranscoder() as StorageTranscoder<number>\n};\n",
    "import { StorageService } from './storage.service';\nimport { StorageDecoder, StorageEncoder, StorageTranscoder } from './storage-transcoder';\nimport { ProxyStorageService } from './proxy-storage.service';\n\n/**\n * Base implementation for storage services.\n */\nexport abstract class BaseStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `BaseStorageService` that uses the specified transcoder by default for read and write operations.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     */\n    constructor(private readonly defaultTranscoder: StorageTranscoder<T>) {\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public abstract has(key: string): boolean;\n\n    /**\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        const value = this.getItem(key);\n\n        return value !== undefined ? (decoder || this.defaultTranscoder).decode(value) : undefined;\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.setItem(key, (encoder || this.defaultTranscoder).encode(value));\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public abstract remove(key: string): void;\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public abstract clear(): void;\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this);\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected abstract getItem(key: string): string | undefined;\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected abstract setItem(key: string, value: string): void;\n\n}\n",
    "import { StorageService } from './storage.service';\nimport { StorageTranscoder, StorageDecoder, StorageEncoder } from './storage-transcoder';\n\n/**\n * A storage service implementation that is used as a proxy for another storage service. This is used to create storage services with a\n * different default transcoder.\n */\nexport class ProxyStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `ProxyStorageService` instance that uses the specified transcoder by default for read and write operations. Actual\n     * read and writes are delegated to given storage service.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     * @param subject           Storage service which should handle to actual storage of data.\n     */\n    constructor(\n        private readonly defaultTranscoder: StorageTranscoder<T>,\n        private readonly subject: StorageService\n    ) { }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.subject.has(key);\n    }\n\n    /*\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        return this.subject.get(key, decoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.subject.set(key, value, encoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.subject.remove(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.subject.clear();\n    }\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this.subject);\n    }\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
