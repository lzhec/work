{
  "version": 3,
  "file": "ngx-webstorage-service.umd.js",
  "sources": [
    "ng://ngx-webstorage-service/out/src/storage-service.module.ts",
    "ng://ngx-webstorage-service/out/src/web-storage.service.ts",
    "ng://ngx-webstorage-service/out/src/in-memory-storage.service.ts",
    "ng://ngx-webstorage-service/out/src/storage-transcoders.ts",
    "ng://ngx-webstorage-service/out/src/base-storage.service.ts",
    "ng://ngx-webstorage-service/out/src/proxy-storage.service.ts",
    "ng://ngx-webstorage-service/node_modules/tslib/tslib.es6.js"
  ],
  "sourcesContent": [
    "import { InjectionToken, NgModule } from '@angular/core';\n\nimport { InMemoryStorageService } from './in-memory-storage.service';\nimport { StorageService } from './storage.service';\nimport { isStorageAvailable, WebStorageService } from './web-storage.service';\n\n/** Injection token for the session storage service. */\nexport const SESSION_STORAGE = new InjectionToken<StorageService>('SESSION_STORAGE');\n\n/** Injection token for the local storage service. */\nexport const LOCAL_STORAGE = new InjectionToken<StorageService>('LOCAL_STORAGE');\n\nexport function sessionStorageFactory(): StorageService {\n    if (typeof sessionStorage as any === 'undefined' || !isStorageAvailable(sessionStorage)) {\n        return new InMemoryStorageService();\n    }\n\n    return new WebStorageService(sessionStorage);\n}\n\nexport function localStorageFactory(): StorageService {\n    if (typeof localStorage as any === 'undefined' || !isStorageAvailable(localStorage)) {\n        return new InMemoryStorageService();\n    }\n\n    return new WebStorageService(localStorage);\n}\n\n@NgModule({\n    providers: [\n        { provide: SESSION_STORAGE, useFactory: sessionStorageFactory },\n        { provide: LOCAL_STORAGE, useFactory: localStorageFactory }\n    ]\n})\nexport class StorageServiceModule {\n\n}\n",
    "import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * An implementation of `StorageService` interface that uses an underlying (web) `Storage` object, such as `localStorage` and\n * `sessionStorage`, as backing data store. This class basically wraps the `Storage` object so it can be accessed through the\n * `StorageService` interface.\n */\nexport class WebStorageService extends BaseStorageService<any> {\n\n    /**\n     * Creates a new `WebStorageService` instance that uses the specified (web) storage object as underlying backing storage.\n     *\n     * @param storage Storage object which is to be wrapped in a class that implements the `StorageService` interface.\n     */\n    constructor(private readonly storage: Storage) {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.getItem(key) !== null;\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.removeItem(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        const value = this.storage.getItem(key);\n\n        return value !== null ? value : undefined;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        return this.storage.setItem(key, value);\n    }\n\n}\n\n/**\n * Checks whether the specified (web) storage is available and functional. This might not be the case for older browsers. However even\n * certain browsers that do support the web storage API can, under some circumstances, have non functional storage objects. For example,\n * Safari is known to have `localStorage` and `sessionStorage` throw exceptions in private mode.\n *\n * @param   storage Storage object which is to be tested for availability.\n * @returns         `true` if the specified storage can be used, `false` if not.\n */\nexport function isStorageAvailable(storage: Storage): boolean {\n    // Check if storage is available.\n    if (!storage) {\n        return false;\n    }\n\n    // Check if the storage can actually be accessed.\n    try {\n        const now = Date.now();\n        const testItemKey = `storage-test-entry-${now}`;\n        const testItemValue = `storage-test-value-${now}`;\n        storage.setItem(testItemKey, testItemValue);\n        const retrievedItemValue = storage.getItem(testItemKey);\n        storage.removeItem(testItemKey);\n\n        return retrievedItemValue === testItemValue;\n    } catch (error) {\n        return false;\n    }\n}\n",
    "import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * A volatile `StorageService` implementation. This service guarantees that data stored will remain available as long as the application\n * instance is active. After the application is terminated all data will be lost.\n */\nexport class InMemoryStorageService extends BaseStorageService<any> {\n\n    /** A map that serves as the underlying backing storage for this service. */\n    private readonly storage: Map<string, string> = new Map<string, string>();\n\n    /**\n     * Creates a new `InMemoryStorageService` instance.\n     */\n    constructor() {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.has(key);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.delete(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        if (!this.storage.has(key)) {\n            return undefined;\n        }\n\n        return this.storage.get(key)!;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        this.storage.set(key, value);\n    }\n\n}\n",
    "import { StorageTranscoder } from './storage-transcoder';\n\n/** Transcoder that encodes values as JSON strings. */\nexport class JsonStorageTranscoder implements StorageTranscoder<any> {\n\n    public encode(value: any): string {\n        return JSON.stringify(value);\n    }\n\n    public decode(value: string): any {\n        try {\n            return JSON.parse(value);\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n}\n\n/** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\nexport class StringStorageTranscoder implements StorageTranscoder<string> {\n    public encode(value: string): string {\n        return value;\n    }\n\n    public decode(value: string): string {\n        return value;\n    }\n}\n\n/** Transcoder that encodes/decodes `boolean` values. */\nexport class BooleanStorageTranscoder implements StorageTranscoder<boolean> {\n    public encode(value: boolean): string {\n        return value.toString();\n    }\n\n    public decode(value: string): boolean | undefined {\n        if (value === 'true') {\n            return true;\n        }\n        if (value === 'false') {\n            return false;\n        }\n\n        return undefined;\n    }\n}\n\n/** Transcoder that encodes/decodes `number` values. */\nexport class NumberStorageTranscoder implements StorageTranscoder<number> {\n    public encode(value: number): string {\n        return value.toString();\n    }\n\n    public decode(value: string): number | undefined {\n        const parsedNumber = Number(value);\n\n        return Number.isFinite(parsedNumber) ? parsedNumber : undefined;\n    }\n}\n\n/** A set of storage transcoders. */\nexport const StorageTranscoders = {\n    /** Transcoder that encodes values as JSON strings. */\n    JSON: new JsonStorageTranscoder() as StorageTranscoder<any>,\n\n    /** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\n    STRING: new StringStorageTranscoder() as StorageTranscoder<string>,\n\n    /** Transcoder that encodes/decodes `boolean` values. */\n    BOOLEAN: new BooleanStorageTranscoder() as StorageTranscoder<boolean>,\n\n    /** Transcoder that encodes/decodes `number` values. */\n    NUMBER: new NumberStorageTranscoder() as StorageTranscoder<number>\n};\n",
    "import { StorageService } from './storage.service';\nimport { StorageDecoder, StorageEncoder, StorageTranscoder } from './storage-transcoder';\nimport { ProxyStorageService } from './proxy-storage.service';\n\n/**\n * Base implementation for storage services.\n */\nexport abstract class BaseStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `BaseStorageService` that uses the specified transcoder by default for read and write operations.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     */\n    constructor(private readonly defaultTranscoder: StorageTranscoder<T>) {\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public abstract has(key: string): boolean;\n\n    /**\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        const value = this.getItem(key);\n\n        return value !== undefined ? (decoder || this.defaultTranscoder).decode(value) : undefined;\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.setItem(key, (encoder || this.defaultTranscoder).encode(value));\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public abstract remove(key: string): void;\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public abstract clear(): void;\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this);\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected abstract getItem(key: string): string | undefined;\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected abstract setItem(key: string, value: string): void;\n\n}\n",
    "import { StorageService } from './storage.service';\nimport { StorageTranscoder, StorageDecoder, StorageEncoder } from './storage-transcoder';\n\n/**\n * A storage service implementation that is used as a proxy for another storage service. This is used to create storage services with a\n * different default transcoder.\n */\nexport class ProxyStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `ProxyStorageService` instance that uses the specified transcoder by default for read and write operations. Actual\n     * read and writes are delegated to given storage service.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     * @param subject           Storage service which should handle to actual storage of data.\n     */\n    constructor(\n        private readonly defaultTranscoder: StorageTranscoder<T>,\n        private readonly subject: StorageService\n    ) { }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.subject.has(key);\n    }\n\n    /*\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        return this.subject.get(key, decoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.subject.set(key, value, encoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.subject.remove(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.subject.clear();\n    }\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this.subject);\n    }\n}\n",
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"
  ],
  "names": [
    "NgModule",
    "InjectionToken",
    "tslib_1.__extends"
  ],
  "mappings": "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"
}
